// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proxy.proto

package gproxy

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GetNextProxyRequest struct {
}

func (m *GetNextProxyRequest) Reset()      { *m = GetNextProxyRequest{} }
func (*GetNextProxyRequest) ProtoMessage() {}
func (*GetNextProxyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{0}
}
func (m *GetNextProxyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNextProxyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNextProxyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNextProxyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNextProxyRequest.Merge(m, src)
}
func (m *GetNextProxyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetNextProxyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNextProxyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNextProxyRequest proto.InternalMessageInfo

type GetNextProxyResponse struct {
	ProxyItem *ProxyItem `protobuf:"bytes,1,opt,name=proxy_item,json=proxyItem,proto3" json:"proxy_item,omitempty"`
}

func (m *GetNextProxyResponse) Reset()      { *m = GetNextProxyResponse{} }
func (*GetNextProxyResponse) ProtoMessage() {}
func (*GetNextProxyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{1}
}
func (m *GetNextProxyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetNextProxyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetNextProxyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetNextProxyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNextProxyResponse.Merge(m, src)
}
func (m *GetNextProxyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetNextProxyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNextProxyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNextProxyResponse proto.InternalMessageInfo

func (m *GetNextProxyResponse) GetProxyItem() *ProxyItem {
	if m != nil {
		return m.ProxyItem
	}
	return nil
}

type GetBestProxyRequest struct {
}

func (m *GetBestProxyRequest) Reset()      { *m = GetBestProxyRequest{} }
func (*GetBestProxyRequest) ProtoMessage() {}
func (*GetBestProxyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{2}
}
func (m *GetBestProxyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBestProxyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBestProxyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBestProxyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBestProxyRequest.Merge(m, src)
}
func (m *GetBestProxyRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBestProxyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBestProxyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBestProxyRequest proto.InternalMessageInfo

type GetBestProxyResponse struct {
	ProxyItem *ProxyItem `protobuf:"bytes,1,opt,name=proxy_item,json=proxyItem,proto3" json:"proxy_item,omitempty"`
}

func (m *GetBestProxyResponse) Reset()      { *m = GetBestProxyResponse{} }
func (*GetBestProxyResponse) ProtoMessage() {}
func (*GetBestProxyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{3}
}
func (m *GetBestProxyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBestProxyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBestProxyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBestProxyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBestProxyResponse.Merge(m, src)
}
func (m *GetBestProxyResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetBestProxyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBestProxyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetBestProxyResponse proto.InternalMessageInfo

func (m *GetBestProxyResponse) GetProxyItem() *ProxyItem {
	if m != nil {
		return m.ProxyItem
	}
	return nil
}

type CreateProxyRequest struct {
	ProxyItem *ProxyItem `protobuf:"bytes,1,opt,name=proxy_item,json=proxyItem,proto3" json:"proxy_item,omitempty"`
}

func (m *CreateProxyRequest) Reset()      { *m = CreateProxyRequest{} }
func (*CreateProxyRequest) ProtoMessage() {}
func (*CreateProxyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{4}
}
func (m *CreateProxyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateProxyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateProxyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateProxyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateProxyRequest.Merge(m, src)
}
func (m *CreateProxyRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateProxyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateProxyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateProxyRequest proto.InternalMessageInfo

func (m *CreateProxyRequest) GetProxyItem() *ProxyItem {
	if m != nil {
		return m.ProxyItem
	}
	return nil
}

type CreateProxyResponse struct {
	ProxyItem *ProxyItem `protobuf:"bytes,1,opt,name=proxy_item,json=proxyItem,proto3" json:"proxy_item,omitempty"`
}

func (m *CreateProxyResponse) Reset()      { *m = CreateProxyResponse{} }
func (*CreateProxyResponse) ProtoMessage() {}
func (*CreateProxyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{5}
}
func (m *CreateProxyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateProxyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateProxyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateProxyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateProxyResponse.Merge(m, src)
}
func (m *CreateProxyResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateProxyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateProxyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateProxyResponse proto.InternalMessageInfo

func (m *CreateProxyResponse) GetProxyItem() *ProxyItem {
	if m != nil {
		return m.ProxyItem
	}
	return nil
}

type ProxyCountry struct {
	CountryId   int64                `protobuf:"varint,1,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	CountryName string               `protobuf:"bytes,2,opt,name=country_name,json=countryName,proto3" json:"country_name,omitempty"`
	CountryCode string               `protobuf:"bytes,3,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	CreatedAt   *timestamp.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *ProxyCountry) Reset()      { *m = ProxyCountry{} }
func (*ProxyCountry) ProtoMessage() {}
func (*ProxyCountry) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{6}
}
func (m *ProxyCountry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyCountry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProxyCountry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProxyCountry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyCountry.Merge(m, src)
}
func (m *ProxyCountry) XXX_Size() int {
	return m.Size()
}
func (m *ProxyCountry) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyCountry.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyCountry proto.InternalMessageInfo

func (m *ProxyCountry) GetCountryId() int64 {
	if m != nil {
		return m.CountryId
	}
	return 0
}

func (m *ProxyCountry) GetCountryName() string {
	if m != nil {
		return m.CountryName
	}
	return ""
}

func (m *ProxyCountry) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *ProxyCountry) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type ProxyStat struct {
	StatId     int64                `protobuf:"varint,1,opt,name=stat_id,json=statId,proto3" json:"stat_id,omitempty"`
	ProxyId    int64                `protobuf:"varint,2,opt,name=proxy_id,json=proxyId,proto3" json:"proxy_id,omitempty"`
	ConnTime   int64                `protobuf:"varint,3,opt,name=conn_time,json=connTime,proto3" json:"conn_time,omitempty"`
	ConnStatus bool                 `protobuf:"varint,4,opt,name=conn_status,json=connStatus,proto3" json:"conn_status,omitempty"`
	CreatedAt  *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *ProxyStat) Reset()      { *m = ProxyStat{} }
func (*ProxyStat) ProtoMessage() {}
func (*ProxyStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{7}
}
func (m *ProxyStat) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProxyStat.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProxyStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyStat.Merge(m, src)
}
func (m *ProxyStat) XXX_Size() int {
	return m.Size()
}
func (m *ProxyStat) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyStat.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyStat proto.InternalMessageInfo

func (m *ProxyStat) GetStatId() int64 {
	if m != nil {
		return m.StatId
	}
	return 0
}

func (m *ProxyStat) GetProxyId() int64 {
	if m != nil {
		return m.ProxyId
	}
	return 0
}

func (m *ProxyStat) GetConnTime() int64 {
	if m != nil {
		return m.ConnTime
	}
	return 0
}

func (m *ProxyStat) GetConnStatus() bool {
	if m != nil {
		return m.ConnStatus
	}
	return false
}

func (m *ProxyStat) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type ProxyItem struct {
	ProxyId      int64                `protobuf:"varint,1,opt,name=proxy_id,json=proxyId,proto3" json:"proxy_id,omitempty"`
	ProxyIp      string               `protobuf:"bytes,2,opt,name=proxy_ip,json=proxyIp,proto3" json:"proxy_ip,omitempty"`
	ProxyPort    int64                `protobuf:"varint,3,opt,name=proxy_port,json=proxyPort,proto3" json:"proxy_port,omitempty"`
	Anonymity    string               `protobuf:"bytes,5,opt,name=anonymity,proto3" json:"anonymity,omitempty"`
	ProxyCountry *ProxyCountry        `protobuf:"bytes,4,opt,name=proxy_country,json=proxyCountry,proto3" json:"proxy_country,omitempty"`
	CreatedAt    *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt    *timestamp.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DeletedAt    *timestamp.Timestamp `protobuf:"bytes,8,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
}

func (m *ProxyItem) Reset()      { *m = ProxyItem{} }
func (*ProxyItem) ProtoMessage() {}
func (*ProxyItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_700b50b08ed8dbaf, []int{8}
}
func (m *ProxyItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProxyItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProxyItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProxyItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProxyItem.Merge(m, src)
}
func (m *ProxyItem) XXX_Size() int {
	return m.Size()
}
func (m *ProxyItem) XXX_DiscardUnknown() {
	xxx_messageInfo_ProxyItem.DiscardUnknown(m)
}

var xxx_messageInfo_ProxyItem proto.InternalMessageInfo

func (m *ProxyItem) GetProxyId() int64 {
	if m != nil {
		return m.ProxyId
	}
	return 0
}

func (m *ProxyItem) GetProxyIp() string {
	if m != nil {
		return m.ProxyIp
	}
	return ""
}

func (m *ProxyItem) GetProxyPort() int64 {
	if m != nil {
		return m.ProxyPort
	}
	return 0
}

func (m *ProxyItem) GetAnonymity() string {
	if m != nil {
		return m.Anonymity
	}
	return ""
}

func (m *ProxyItem) GetProxyCountry() *ProxyCountry {
	if m != nil {
		return m.ProxyCountry
	}
	return nil
}

func (m *ProxyItem) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *ProxyItem) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func (m *ProxyItem) GetDeletedAt() *timestamp.Timestamp {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*GetNextProxyRequest)(nil), "gproxy.GetNextProxyRequest")
	proto.RegisterType((*GetNextProxyResponse)(nil), "gproxy.GetNextProxyResponse")
	proto.RegisterType((*GetBestProxyRequest)(nil), "gproxy.GetBestProxyRequest")
	proto.RegisterType((*GetBestProxyResponse)(nil), "gproxy.GetBestProxyResponse")
	proto.RegisterType((*CreateProxyRequest)(nil), "gproxy.CreateProxyRequest")
	proto.RegisterType((*CreateProxyResponse)(nil), "gproxy.CreateProxyResponse")
	proto.RegisterType((*ProxyCountry)(nil), "gproxy.ProxyCountry")
	proto.RegisterType((*ProxyStat)(nil), "gproxy.ProxyStat")
	proto.RegisterType((*ProxyItem)(nil), "gproxy.ProxyItem")
}

func init() { proto.RegisterFile("proxy.proto", fileDescriptor_700b50b08ed8dbaf) }

var fileDescriptor_700b50b08ed8dbaf = []byte{
	// 589 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0xf6, 0x35, 0x34, 0x89, 0x5f, 0xc2, 0xc0, 0xb5, 0x88, 0xe0, 0x96, 0x6b, 0xc9, 0xd4, 0x05,
	0x07, 0x95, 0x85, 0x8e, 0x6d, 0x24, 0xda, 0x08, 0xa9, 0xaa, 0x5c, 0x26, 0x96, 0xc8, 0x89, 0x0f,
	0x63, 0xa9, 0xf6, 0x19, 0xfb, 0x2c, 0x35, 0x1b, 0x7f, 0x02, 0x7f, 0x06, 0x13, 0x73, 0xff, 0x04,
	0xc6, 0x8e, 0x1d, 0x89, 0xb3, 0xc1, 0xc2, 0xc8, 0x88, 0xee, 0x87, 0x1b, 0x3b, 0x8d, 0x54, 0x35,
	0xdb, 0xdd, 0xf7, 0xbe, 0xf7, 0xdd, 0x77, 0xef, 0xde, 0x3d, 0x68, 0xc5, 0x09, 0xbb, 0x9c, 0xd8,
	0x71, 0xc2, 0x38, 0xc3, 0x75, 0x5f, 0xee, 0xac, 0x1d, 0x9f, 0x31, 0xff, 0x82, 0xf6, 0x24, 0x3a,
	0xca, 0x3e, 0xf5, 0x78, 0x10, 0xd2, 0x94, 0xbb, 0x61, 0xac, 0x88, 0xd6, 0x2b, 0x3f, 0xe0, 0x9f,
	0xb3, 0x91, 0x3d, 0x66, 0x61, 0xcf, 0x67, 0x3e, 0x9b, 0x33, 0xc5, 0x4e, 0x6e, 0xe4, 0x4a, 0xd1,
	0xbb, 0x4f, 0x61, 0xe3, 0x98, 0xf2, 0x53, 0x7a, 0xc9, 0xcf, 0x84, 0xbe, 0x43, 0xbf, 0x64, 0x34,
	0xe5, 0xdd, 0x13, 0xd8, 0xac, 0xc2, 0x69, 0xcc, 0xa2, 0x94, 0xe2, 0xd7, 0x00, 0xd2, 0xc7, 0x30,
	0xe0, 0x34, 0xec, 0xa0, 0x5d, 0xb4, 0xd7, 0xda, 0x7f, 0x62, 0x2b, 0x6f, 0xb6, 0xa4, 0x0e, 0x38,
	0x0d, 0x1d, 0x33, 0x2e, 0x96, 0xfa, 0x80, 0x23, 0x9a, 0x2e, 0x3b, 0xa0, 0x04, 0xaf, 0x7c, 0xc0,
	0x3b, 0xc0, 0xfd, 0x84, 0xba, 0x9c, 0x96, 0xf5, 0x57, 0xd0, 0x39, 0x86, 0x8d, 0x8a, 0xce, 0xca,
	0x86, 0x7e, 0x20, 0x68, 0xcb, 0x40, 0x9f, 0x65, 0x11, 0x4f, 0x26, 0xf8, 0x05, 0xc0, 0x58, 0x2d,
	0x87, 0x81, 0x27, 0x25, 0x6a, 0x8e, 0xa9, 0x91, 0x81, 0x87, 0x5f, 0x42, 0xbb, 0x08, 0x47, 0x6e,
	0x48, 0x3b, 0x6b, 0xbb, 0x68, 0xcf, 0x74, 0x5a, 0x1a, 0x3b, 0x75, 0x43, 0x5a, 0xa6, 0x8c, 0x99,
	0x47, 0x3b, 0xb5, 0x0a, 0xa5, 0xcf, 0x3c, 0x8a, 0x0f, 0x00, 0xc6, 0xd2, 0xbe, 0x37, 0x74, 0x79,
	0xe7, 0x91, 0xf4, 0x69, 0xd9, 0xaa, 0x5b, 0xec, 0xa2, 0x07, 0xec, 0x0f, 0x45, 0xb7, 0x38, 0xa6,
	0x66, 0x1f, 0xf2, 0xee, 0x15, 0x02, 0x53, 0x1a, 0x3e, 0xe7, 0x2e, 0xc7, 0xcf, 0xa0, 0x91, 0x72,
	0x97, 0xcf, 0xad, 0xd6, 0xc5, 0x76, 0xe0, 0xe1, 0xe7, 0xd0, 0xd4, 0x95, 0xf0, 0xa4, 0xc7, 0x9a,
	0xd3, 0x50, 0x97, 0xf6, 0xf0, 0x16, 0x98, 0x63, 0x16, 0x45, 0x43, 0xd1, 0x8c, 0xd2, 0x5c, 0xcd,
	0x69, 0x0a, 0x40, 0x1c, 0x87, 0x77, 0xa0, 0x25, 0x83, 0x42, 0x26, 0x4b, 0xa5, 0xb5, 0xa6, 0x03,
	0x02, 0x3a, 0x97, 0xc8, 0x82, 0xf5, 0xf5, 0x87, 0x58, 0xff, 0xbd, 0xa6, 0xad, 0x8b, 0xca, 0x57,
	0x1c, 0xa2, 0xaa, 0xc3, 0x79, 0x28, 0xd6, 0x05, 0xd6, 0xa1, 0x58, 0x3c, 0x8f, 0x0a, 0xc5, 0x2c,
	0xe1, 0xda, 0xbd, 0x7a, 0xce, 0x33, 0x96, 0x70, 0xbc, 0x0d, 0xa6, 0x1b, 0xb1, 0x68, 0x12, 0x06,
	0x7c, 0x22, 0xcd, 0x99, 0xce, 0x1c, 0xc0, 0x07, 0xf0, 0x58, 0x25, 0xeb, 0xb7, 0xd0, 0x95, 0xdf,
	0xac, 0x74, 0x88, 0x6e, 0x04, 0xa7, 0x1d, 0x97, 0xdb, 0xa2, 0x7a, 0xed, 0xfa, 0x03, 0xae, 0x2d,
	0x52, 0xb3, 0xd8, 0x2b, 0x52, 0x1b, 0xf7, 0xa7, 0x6a, 0xb6, 0x4a, 0xf5, 0xe8, 0x05, 0xd5, 0xa9,
	0xcd, 0xfb, 0x53, 0x35, 0xfb, 0x90, 0xef, 0xff, 0x41, 0xb0, 0x2e, 0xef, 0x83, 0x4f, 0xa0, 0x55,
	0xfa, 0x2b, 0xd8, 0x2a, 0x6e, 0x7b, 0xf7, 0x23, 0x5a, 0x5b, 0x4b, 0x63, 0xea, 0x73, 0x75, 0x0d,
	0xfc, 0x1e, 0xda, 0xe5, 0x41, 0x83, 0x6f, 0xe9, 0x4b, 0xa6, 0x92, 0xb5, 0xbd, 0x3c, 0xb8, 0x20,
	0x76, 0x3b, 0x54, 0x2a, 0x62, 0x8b, 0x13, 0xa8, 0x22, 0x76, 0x67, 0x0e, 0x75, 0x8d, 0xa3, 0xb7,
	0x37, 0x53, 0x62, 0xfc, 0x9d, 0x12, 0xf4, 0x6f, 0x4a, 0xd0, 0xd7, 0x9c, 0xa0, 0xef, 0x39, 0x31,
	0xae, 0x72, 0x62, 0xfc, 0xcc, 0x09, 0xba, 0xce, 0x09, 0xfa, 0x95, 0x13, 0xf4, 0x6d, 0x46, 0x8c,
	0xeb, 0x19, 0x31, 0x6e, 0x66, 0xc4, 0xf8, 0xa8, 0x67, 0xf4, 0xa8, 0x2e, 0xcb, 0xf8, 0xe6, 0x7f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x67, 0xd8, 0x21, 0xcb, 0xc1, 0x05, 0x00, 0x00,
}

func (this *GetNextProxyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&gproxy.GetNextProxyRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetNextProxyResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gproxy.GetNextProxyResponse{")
	if this.ProxyItem != nil {
		s = append(s, "ProxyItem: "+fmt.Sprintf("%#v", this.ProxyItem)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBestProxyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&gproxy.GetBestProxyRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBestProxyResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gproxy.GetBestProxyResponse{")
	if this.ProxyItem != nil {
		s = append(s, "ProxyItem: "+fmt.Sprintf("%#v", this.ProxyItem)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateProxyRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gproxy.CreateProxyRequest{")
	if this.ProxyItem != nil {
		s = append(s, "ProxyItem: "+fmt.Sprintf("%#v", this.ProxyItem)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateProxyResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&gproxy.CreateProxyResponse{")
	if this.ProxyItem != nil {
		s = append(s, "ProxyItem: "+fmt.Sprintf("%#v", this.ProxyItem)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyCountry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&gproxy.ProxyCountry{")
	s = append(s, "CountryId: "+fmt.Sprintf("%#v", this.CountryId)+",\n")
	s = append(s, "CountryName: "+fmt.Sprintf("%#v", this.CountryName)+",\n")
	s = append(s, "CountryCode: "+fmt.Sprintf("%#v", this.CountryCode)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyStat) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&gproxy.ProxyStat{")
	s = append(s, "StatId: "+fmt.Sprintf("%#v", this.StatId)+",\n")
	s = append(s, "ProxyId: "+fmt.Sprintf("%#v", this.ProxyId)+",\n")
	s = append(s, "ConnTime: "+fmt.Sprintf("%#v", this.ConnTime)+",\n")
	s = append(s, "ConnStatus: "+fmt.Sprintf("%#v", this.ConnStatus)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ProxyItem) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 12)
	s = append(s, "&gproxy.ProxyItem{")
	s = append(s, "ProxyId: "+fmt.Sprintf("%#v", this.ProxyId)+",\n")
	s = append(s, "ProxyIp: "+fmt.Sprintf("%#v", this.ProxyIp)+",\n")
	s = append(s, "ProxyPort: "+fmt.Sprintf("%#v", this.ProxyPort)+",\n")
	s = append(s, "Anonymity: "+fmt.Sprintf("%#v", this.Anonymity)+",\n")
	if this.ProxyCountry != nil {
		s = append(s, "ProxyCountry: "+fmt.Sprintf("%#v", this.ProxyCountry)+",\n")
	}
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.UpdatedAt != nil {
		s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	}
	if this.DeletedAt != nil {
		s = append(s, "DeletedAt: "+fmt.Sprintf("%#v", this.DeletedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProxy(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProxyClient is the client API for Proxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProxyClient interface {
	CreateProxy(ctx context.Context, in *CreateProxyRequest, opts ...grpc.CallOption) (*CreateProxyResponse, error)
	GetNextProxy(ctx context.Context, in *GetNextProxyRequest, opts ...grpc.CallOption) (*GetNextProxyResponse, error)
	GetBestProxy(ctx context.Context, in *GetBestProxyRequest, opts ...grpc.CallOption) (*GetBestProxyResponse, error)
}

type proxyClient struct {
	cc *grpc.ClientConn
}

func NewProxyClient(cc *grpc.ClientConn) ProxyClient {
	return &proxyClient{cc}
}

func (c *proxyClient) CreateProxy(ctx context.Context, in *CreateProxyRequest, opts ...grpc.CallOption) (*CreateProxyResponse, error) {
	out := new(CreateProxyResponse)
	err := c.cc.Invoke(ctx, "/gproxy.Proxy/CreateProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) GetNextProxy(ctx context.Context, in *GetNextProxyRequest, opts ...grpc.CallOption) (*GetNextProxyResponse, error) {
	out := new(GetNextProxyResponse)
	err := c.cc.Invoke(ctx, "/gproxy.Proxy/GetNextProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyClient) GetBestProxy(ctx context.Context, in *GetBestProxyRequest, opts ...grpc.CallOption) (*GetBestProxyResponse, error) {
	out := new(GetBestProxyResponse)
	err := c.cc.Invoke(ctx, "/gproxy.Proxy/GetBestProxy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServer is the server API for Proxy service.
type ProxyServer interface {
	CreateProxy(context.Context, *CreateProxyRequest) (*CreateProxyResponse, error)
	GetNextProxy(context.Context, *GetNextProxyRequest) (*GetNextProxyResponse, error)
	GetBestProxy(context.Context, *GetBestProxyRequest) (*GetBestProxyResponse, error)
}

// UnimplementedProxyServer can be embedded to have forward compatible implementations.
type UnimplementedProxyServer struct {
}

func (*UnimplementedProxyServer) CreateProxy(ctx context.Context, req *CreateProxyRequest) (*CreateProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProxy not implemented")
}
func (*UnimplementedProxyServer) GetNextProxy(ctx context.Context, req *GetNextProxyRequest) (*GetNextProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextProxy not implemented")
}
func (*UnimplementedProxyServer) GetBestProxy(ctx context.Context, req *GetBestProxyRequest) (*GetBestProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBestProxy not implemented")
}

func RegisterProxyServer(s *grpc.Server, srv ProxyServer) {
	s.RegisterService(&_Proxy_serviceDesc, srv)
}

func _Proxy_CreateProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).CreateProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproxy.Proxy/CreateProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).CreateProxy(ctx, req.(*CreateProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_GetNextProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).GetNextProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproxy.Proxy/GetNextProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).GetNextProxy(ctx, req.(*GetNextProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Proxy_GetBestProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBestProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServer).GetBestProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gproxy.Proxy/GetBestProxy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServer).GetBestProxy(ctx, req.(*GetBestProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Proxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gproxy.Proxy",
	HandlerType: (*ProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProxy",
			Handler:    _Proxy_CreateProxy_Handler,
		},
		{
			MethodName: "GetNextProxy",
			Handler:    _Proxy_GetNextProxy_Handler,
		},
		{
			MethodName: "GetBestProxy",
			Handler:    _Proxy_GetBestProxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proxy.proto",
}

func (m *GetNextProxyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNextProxyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNextProxyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetNextProxyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetNextProxyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetNextProxyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProxyItem != nil {
		{
			size, err := m.ProxyItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProxy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetBestProxyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBestProxyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBestProxyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetBestProxyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBestProxyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBestProxyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProxyItem != nil {
		{
			size, err := m.ProxyItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProxy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateProxyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateProxyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateProxyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProxyItem != nil {
		{
			size, err := m.ProxyItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProxy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateProxyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateProxyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateProxyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProxyItem != nil {
		{
			size, err := m.ProxyItem.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProxy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProxyCountry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyCountry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyCountry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProxy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.CountryCode) > 0 {
		i -= len(m.CountryCode)
		copy(dAtA[i:], m.CountryCode)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.CountryCode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CountryName) > 0 {
		i -= len(m.CountryName)
		copy(dAtA[i:], m.CountryName)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.CountryName)))
		i--
		dAtA[i] = 0x12
	}
	if m.CountryId != 0 {
		i = encodeVarintProxy(dAtA, i, uint64(m.CountryId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProxyStat) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyStat) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyStat) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProxy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.ConnStatus {
		i--
		if m.ConnStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ConnTime != 0 {
		i = encodeVarintProxy(dAtA, i, uint64(m.ConnTime))
		i--
		dAtA[i] = 0x18
	}
	if m.ProxyId != 0 {
		i = encodeVarintProxy(dAtA, i, uint64(m.ProxyId))
		i--
		dAtA[i] = 0x10
	}
	if m.StatId != 0 {
		i = encodeVarintProxy(dAtA, i, uint64(m.StatId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ProxyItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProxyItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProxyItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletedAt != nil {
		{
			size, err := m.DeletedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProxy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.UpdatedAt != nil {
		{
			size, err := m.UpdatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProxy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.CreatedAt != nil {
		{
			size, err := m.CreatedAt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProxy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Anonymity) > 0 {
		i -= len(m.Anonymity)
		copy(dAtA[i:], m.Anonymity)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.Anonymity)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ProxyCountry != nil {
		{
			size, err := m.ProxyCountry.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProxy(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ProxyPort != 0 {
		i = encodeVarintProxy(dAtA, i, uint64(m.ProxyPort))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProxyIp) > 0 {
		i -= len(m.ProxyIp)
		copy(dAtA[i:], m.ProxyIp)
		i = encodeVarintProxy(dAtA, i, uint64(len(m.ProxyIp)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProxyId != 0 {
		i = encodeVarintProxy(dAtA, i, uint64(m.ProxyId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProxy(dAtA []byte, offset int, v uint64) int {
	offset -= sovProxy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedGetNextProxyRequest(r randyProxy, easy bool) *GetNextProxyRequest {
	this := &GetNextProxyRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetNextProxyResponse(r randyProxy, easy bool) *GetNextProxyResponse {
	this := &GetNextProxyResponse{}
	if r.Intn(5) != 0 {
		this.ProxyItem = NewPopulatedProxyItem(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetBestProxyRequest(r randyProxy, easy bool) *GetBestProxyRequest {
	this := &GetBestProxyRequest{}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetBestProxyResponse(r randyProxy, easy bool) *GetBestProxyResponse {
	this := &GetBestProxyResponse{}
	if r.Intn(5) != 0 {
		this.ProxyItem = NewPopulatedProxyItem(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateProxyRequest(r randyProxy, easy bool) *CreateProxyRequest {
	this := &CreateProxyRequest{}
	if r.Intn(5) != 0 {
		this.ProxyItem = NewPopulatedProxyItem(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateProxyResponse(r randyProxy, easy bool) *CreateProxyResponse {
	this := &CreateProxyResponse{}
	if r.Intn(5) != 0 {
		this.ProxyItem = NewPopulatedProxyItem(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProxyCountry(r randyProxy, easy bool) *ProxyCountry {
	this := &ProxyCountry{}
	this.CountryId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CountryId *= -1
	}
	this.CountryName = string(randStringProxy(r))
	this.CountryCode = string(randStringProxy(r))
	if r.Intn(5) != 0 {
		this.CreatedAt = timestamp.NewPopulatedTimestamp(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProxyStat(r randyProxy, easy bool) *ProxyStat {
	this := &ProxyStat{}
	this.StatId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.StatId *= -1
	}
	this.ProxyId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ProxyId *= -1
	}
	this.ConnTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ConnTime *= -1
	}
	this.ConnStatus = bool(bool(r.Intn(2) == 0))
	if r.Intn(5) != 0 {
		this.CreatedAt = timestamp.NewPopulatedTimestamp(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedProxyItem(r randyProxy, easy bool) *ProxyItem {
	this := &ProxyItem{}
	this.ProxyId = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ProxyId *= -1
	}
	this.ProxyIp = string(randStringProxy(r))
	this.ProxyPort = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ProxyPort *= -1
	}
	if r.Intn(5) != 0 {
		this.ProxyCountry = NewPopulatedProxyCountry(r, easy)
	}
	this.Anonymity = string(randStringProxy(r))
	if r.Intn(5) != 0 {
		this.CreatedAt = timestamp.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = timestamp.NewPopulatedTimestamp(r, easy)
	}
	if r.Intn(5) != 0 {
		this.DeletedAt = timestamp.NewPopulatedTimestamp(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyProxy interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneProxy(r randyProxy) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringProxy(r randyProxy) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneProxy(r)
	}
	return string(tmps)
}
func randUnrecognizedProxy(r randyProxy, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldProxy(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldProxy(dAtA []byte, r randyProxy, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateProxy(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateProxy(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateProxy(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateProxy(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateProxy(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateProxy(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateProxy(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *GetNextProxyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetNextProxyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyItem != nil {
		l = m.ProxyItem.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	return n
}

func (m *GetBestProxyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetBestProxyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyItem != nil {
		l = m.ProxyItem.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	return n
}

func (m *CreateProxyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyItem != nil {
		l = m.ProxyItem.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	return n
}

func (m *CreateProxyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyItem != nil {
		l = m.ProxyItem.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	return n
}

func (m *ProxyCountry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CountryId != 0 {
		n += 1 + sovProxy(uint64(m.CountryId))
	}
	l = len(m.CountryName)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	return n
}

func (m *ProxyStat) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StatId != 0 {
		n += 1 + sovProxy(uint64(m.StatId))
	}
	if m.ProxyId != 0 {
		n += 1 + sovProxy(uint64(m.ProxyId))
	}
	if m.ConnTime != 0 {
		n += 1 + sovProxy(uint64(m.ConnTime))
	}
	if m.ConnStatus {
		n += 2
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	return n
}

func (m *ProxyItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProxyId != 0 {
		n += 1 + sovProxy(uint64(m.ProxyId))
	}
	l = len(m.ProxyIp)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.ProxyPort != 0 {
		n += 1 + sovProxy(uint64(m.ProxyPort))
	}
	if m.ProxyCountry != nil {
		l = m.ProxyCountry.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	l = len(m.Anonymity)
	if l > 0 {
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = m.UpdatedAt.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	if m.DeletedAt != nil {
		l = m.DeletedAt.Size()
		n += 1 + l + sovProxy(uint64(l))
	}
	return n
}

func sovProxy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProxy(x uint64) (n int) {
	return sovProxy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *GetNextProxyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetNextProxyRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetNextProxyResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetNextProxyResponse{`,
		`ProxyItem:` + strings.Replace(this.ProxyItem.String(), "ProxyItem", "ProxyItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBestProxyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBestProxyRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetBestProxyResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBestProxyResponse{`,
		`ProxyItem:` + strings.Replace(this.ProxyItem.String(), "ProxyItem", "ProxyItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateProxyRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateProxyRequest{`,
		`ProxyItem:` + strings.Replace(this.ProxyItem.String(), "ProxyItem", "ProxyItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateProxyResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateProxyResponse{`,
		`ProxyItem:` + strings.Replace(this.ProxyItem.String(), "ProxyItem", "ProxyItem", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyCountry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyCountry{`,
		`CountryId:` + fmt.Sprintf("%v", this.CountryId) + `,`,
		`CountryName:` + fmt.Sprintf("%v", this.CountryName) + `,`,
		`CountryCode:` + fmt.Sprintf("%v", this.CountryCode) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyStat) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyStat{`,
		`StatId:` + fmt.Sprintf("%v", this.StatId) + `,`,
		`ProxyId:` + fmt.Sprintf("%v", this.ProxyId) + `,`,
		`ConnTime:` + fmt.Sprintf("%v", this.ConnTime) + `,`,
		`ConnStatus:` + fmt.Sprintf("%v", this.ConnStatus) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ProxyItem) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ProxyItem{`,
		`ProxyId:` + fmt.Sprintf("%v", this.ProxyId) + `,`,
		`ProxyIp:` + fmt.Sprintf("%v", this.ProxyIp) + `,`,
		`ProxyPort:` + fmt.Sprintf("%v", this.ProxyPort) + `,`,
		`ProxyCountry:` + strings.Replace(this.ProxyCountry.String(), "ProxyCountry", "ProxyCountry", 1) + `,`,
		`Anonymity:` + fmt.Sprintf("%v", this.Anonymity) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`DeletedAt:` + strings.Replace(fmt.Sprintf("%v", this.DeletedAt), "Timestamp", "timestamp.Timestamp", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProxy(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *GetNextProxyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNextProxyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNextProxyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetNextProxyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetNextProxyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetNextProxyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProxyItem == nil {
				m.ProxyItem = &ProxyItem{}
			}
			if err := m.ProxyItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBestProxyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBestProxyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBestProxyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBestProxyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBestProxyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBestProxyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProxyItem == nil {
				m.ProxyItem = &ProxyItem{}
			}
			if err := m.ProxyItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateProxyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateProxyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateProxyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProxyItem == nil {
				m.ProxyItem = &ProxyItem{}
			}
			if err := m.ProxyItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateProxyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateProxyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateProxyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyItem", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProxyItem == nil {
				m.ProxyItem = &ProxyItem{}
			}
			if err := m.ProxyItem.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyCountry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyCountry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyCountry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryId", wireType)
			}
			m.CountryId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CountryId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &timestamp.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyStat) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyStat: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyStat: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatId", wireType)
			}
			m.StatId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StatId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyId", wireType)
			}
			m.ProxyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnTime", wireType)
			}
			m.ConnTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConnTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ConnStatus = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &timestamp.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProxyItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProxyItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProxyItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyId", wireType)
			}
			m.ProxyId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyIp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyIp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyPort", wireType)
			}
			m.ProxyPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProxyPort |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyCountry", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProxyCountry == nil {
				m.ProxyCountry = &ProxyCountry{}
			}
			if err := m.ProxyCountry.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anonymity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Anonymity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &timestamp.Timestamp{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = &timestamp.Timestamp{}
			}
			if err := m.UpdatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProxy
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeletedAt == nil {
				m.DeletedAt = &timestamp.Timestamp{}
			}
			if err := m.DeletedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProxy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProxy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProxy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProxy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProxy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProxy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProxy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProxy = fmt.Errorf("proto: unexpected end of group")
)
